#+title: My personal emacs configuration
#+author: chn.taocheng

* emacs gc config
#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; <2023-10-07 Sat>
  (setq gc-cons-threshold 800000)
  (setq gc-cons-percentage 0.5)
#+end_src

* custom variables
#+begin_src emacs-lisp :tangle "init.el"
  ;;; <2023-10-07 Sat>
  (setq custom-file
	(concat user-emacs-directory "custom.el"))
  (load custom-file 'noerror)
#+end_src

* init packages manager
#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; <2023-10-08 Sun>
  (setq package-enable-at-startup nil)
#+end_src

#+begin_src emacs-lisp :tangle "init.el"
  ;;; <2023-10-08 Sun>
  (package-initialize)
  (setq package-archives
	'(("melpa" . "http://mirrors.ustc.edu.cn/elpa/melpa/")))
  ;;; install use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

* font
#+begin_src emacs-lisp :tangle "init.el"
  ;;; <2023-10-07 Sat>
  (set-face-attribute 'default nil
		      :family "Monospace"
		      :font "Intel One Mono Light"
		      :foundry "outline"
		      :weight 'regular
		      :height 150)
#+end_src

* views
#+begin_src emacs-lisp :tangle "init.el"
  ;;; <2023-10-07 Sat>
  ;;; tool bar
  (if (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
  ;;; scroll bar
  (if (fboundp 'scroll-bar-mode)
      (set-scroll-bar-mode nil))
  ;;; menu bar
  (if (fboundp 'menu-bar-mode)
      (menu-bar-mode -1))
  ;;; startup screen
  (setq inhibit-startup-screen t)
  ;;; No startup message
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message t)
  ;;; No message in scratch buffer
  ;;; (setq initial-scratch-message t)
  ;;; Show emacs init time
  ;;; Reference: <https://emacs.stackexchange.com/questions/432/how-to-change-default-minibuffer-message>
  (defun display-startup-echo-area-message ()
    (message (concat "Let's emacs hacking!!! Init time: "
		     (emacs-init-time))))
#+end_src

* line number
#+begin_src emacs-lisp :tangle "init.el"
  ;;; line number
  (if (< emacs-major-version 29)
      (global-linum-mode)
    (progn (global-display-line-numbers-mode)
	   (setq display-line-numbers-type 'relative)))
  ;;; highlight current line
  (global-hl-line-mode)
#+end_src

* editor
#+begin_src emacs-lisp :tangle "init.el"
  ;;; <2023-10-07 Sat>
  ;;; backup files
  (setq make-backup-files nil)
#+end_src

* refresh/revert file
#+begin_src emacs-lisp :tangle "init.el"
  ;;; refresh/revert file
  (global-auto-revert-mode 1)
#+end_src

* Themes
#+begin_src emacs-lisp :tangle "init.el"
  (use-package solarized-theme
    :ensure t)
  (use-package doom-themes
    :ensure t)
  ;;; <2023-11-06 Mon>
  (load-theme 'doom-acario-dark t)
#+end_src

* mode line
- reference by:
  - [[https://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html][customizing-mode-line by emacs-fu]]
  - [[https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-modeline.el][init-modeline by refguardtoo]]
#+begin_src emacs-lisp :tangle "init.el"
  (setq-default mode-line-format
    (list
      ;;; the buffer name; the file name as a tool tip
      '(:eval (propertize "%b " 'face 'font-lock-keyword-face
	  'help-echo (buffer-file-name)))

      ;;; line and column
      "(" ;;; '%02' to set to 2 chars at least; prevents flickering
	(propertize "%02l" 'face 'font-lock-type-face) ","
	(propertize "%02c" 'face 'font-lock-type-face)
      ") "

      ;;; relative position, size of file
      "["
      (propertize "%p" 'face 'font-lock-constant-face) ;;; % above top
      "/"
      (propertize "%I" 'face 'font-lock-constant-face) ;;; size
      "] "

      ;;; the current major mode for the buffer.
      "["

      '(:eval (propertize "%m" 'face 'font-lock-string-face
		'help-echo buffer-file-coding-system))
      "] "


      "[" ;;; insert vs overwrite mode, input-method in a tooltip
      '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
		'face 'font-lock-preprocessor-face
		'help-echo (concat "Buffer is in "
			     (if overwrite-mode "overwrite" "insert") " mode")))

      ;;; was this buffer modified since the last save?
      '(:eval (when (buffer-modified-p)
		(concat ","  (propertize "Mod"
			       'face 'font-lock-warning-face
			       'help-echo "Buffer has been modified"))))

      ;;; is this buffer read-only?
      '(:eval (when buffer-read-only
		(concat ","  (propertize "RO"
			       'face 'font-lock-type-face
			       'help-echo "Buffer is read-only"))))
      "] "

      ;;; add the time, with the date and the emacs uptime in the tooltip
      '(:eval (propertize (format-time-string "%H:%M")
		'help-echo
		(concat (format-time-string "%c; ")
			(emacs-uptime "Uptime:%hh"))))
      " --"
      ;;; i don't want to see minor-modes; but if you want, uncomment this:
      ;;; minor-mode-alist  ;; list of minor modes
      "%-" ;;; fill with '-'
      ))
#+end_src

* column indicator
#+begin_src emacs-lisp :tangle "init.el"
  (setq-default display-fill-column-indicator-column 80)
  (setq-default display-fill-column-indicator-character 9474) ;; '|'
  (global-display-fill-column-indicator-mode t)
#+end_src

* environment
#+begin_src emacs-lisp :tangle "init.el"
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+end_src

* company
#+begin_src emacs-lisp :tangle "init.el"
  (use-package company
    :ensure t
    :hook
    (prog-mode . global-company-mode)
    :init
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0))
#+end_src

* eglot
#+begin_src emacs-lisp :tangle "init.el"
  (use-package eglot
    :ensure t
    :config
    (add-hook 'haskell-mode-hook 'eglot-ensure)
    (add-hook 'zig-mode-hook 'eglot-ensure)
    :config
    (setq-default eglot-workspakce-configuration
		  '((haskell
		     (plugin
		      (stan
		       (globalOn . :json-false)))))) ;; disable stan
    :custom
    (eglot-autoshutdown t) ;; shutdown language server after closing last file
    (eglot-confirm-server-initiated-edits nil) ;; alow edits with confirmation
    )
#+end_src

* programming languages

** Haskell
#+begin_src emacs-lisp :tangle "init.el"
  (use-package haskell-mode
    :ensure t
    :hook ((haskell-mode-hook . haskell-indentation-mode)))
#+end_src

** Ziglang
#+begin_src emacs-lisp :tangle "init.el"
  (use-package zig-mode
    :ensure t)
#+end_src
